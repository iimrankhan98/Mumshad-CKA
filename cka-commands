## Mumshad CKA #############
## Section 3: Sheduling #######
kubectl get pods -o yaml > pod.yml
kubectl get pods --show-labels
kubectl get pods --selector  env=prod
kubectl get all --selector env=prod

kubectl taint nodes node-name  key=value:NoSchedule   [taint-effect, NoSchedule, NoExecute and PreferNoSchedule]
kubectl  describe nodes node01  | grep Taint
kubectl taint nodes <node-name> node-role.kubernetes.io/control-plane:NoSchedule- [Remove taint from master node]

kubectl label nodes node-1  label-key=label-value

kubectl create â€“f deployment-definition.yml
kubectl get deployment
kubectl set image deployment/myapp-deployment nginx=nginx:1.9.1
kubectl rollout status deployment/myapp-deployment
kubectl rollout history deployment/myapp-deployment
kubectl rollout undo deployment/myapp-deployment

kubectl drain node-1   [Existing pods removed and new pods will not schedule ]
kebectl cordon node-2  [Existing pods continue running and new pods will not schedule]
kubectl uncordon node-1[Schedule new pods again]

## Section 6: Cluster Maintenance
# K8s Cluster Upgrade Process ##
# Upgrade control-plane
kubeadm upgrade plan
vim /etc/apt/sources.list.d/kubernetes.list
deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /
apt update
apt-cache madison kubeadm
apt-get install kubeadm=1.31.0-1.1

kubeadm upgrade plan v1.31.0
kubeadm upgrade apply v1.31.0
apt-get install kubelet=1.31.0-1.1
systemctl daemon-reload
systemctl restart kubelet

# Upgrade the worker-node
 
vim /etc/apt/sources.list.d/kubernetes.list
deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /
apt update
apt-cache madison kubeadm
apt-get install kubeadm=1.31.0-1.1
# Upgrade the node 
kubeadm upgrade node
apt-get install kubelet=1.31.0-1.1
systemctl daemon-reload
systemctl restart kubelet

# Backup - ETCD
sudo ETCDCTL_API=3 etcdctl snapshot save /opt/snapshot-pre-boot.db \
  --endpoints=https://127.0.0.1:2379 \
  --cacert=/etc/kubernetes/pki/etcd/ca.crt \
  --cert=/etc/kubernetes/pki/etcd/server.crt \
  --key=/etc/kubernetes/pki/etcd/server.key

# Restore etcd from Backup
ETCDCTL_API=3 etcdctl  --data-dir /var/lib/etcd-from-backup \
snapshot restore /opt/snapshot-pre-boot.db

vim /etc/kubernetes/manifests/etcd.yaml and replace  /var/lib/etcd from  /var/lib/etcd-from-backup

containers:
- command:
  - etcd
  - --advertise-client-urls=https://192.168.163.63:2379
  - --cert-file=/etc/kubernetes/pki/etcd/server.crt
  - --client-cert-auth=true
  - --data-dir=/var/lib/etcd-from-backup

volumeMounts:
- mountPath: /var/lib/etcd-from-backup
  name: etcd-data
- mountPath: /etc/kubernetes/pki/etcd
  name: etcd-certs

volumes:
  - hostPath:
      path: /var/lib/etcd-from-backup
      type: DirectoryOrCreate
    name: etcd-data

